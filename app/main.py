import asyncio
import datetime
import logging
import random
import re
import secrets
import sys
from datetime import timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import ChatPermissions, Message
from aiogram.utils.chat_member import ADMINS

from app.config import settings
from app.logging_config import setup_logging
from app.utils import get_random_top_shortik

setup_logging()
logger = logging.getLogger(__name__)

dp = Dispatcher()
# –ï—Å–ª–∏ SOURCE_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∑–∞–ø–æ–º–Ω–∏–º –µ–≥–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
dp["dynamic_source_chat_id"] = None


@dp.message(Command("roll"))
async def roll(message: Message):
    args = message.text.split()[1:]
    low, high = 1, 100
    try:
        if len(args) == 1:
            low, high = 1, int(args[0])
        elif len(args) == 2:  # noqa: PLR2004
            low, high = int(args[0]), int(args[1])
        if high > 100_000_000_000:
            await message.answer("–ê–≥–∞ –∏ –∫–æ—Ä–æ–≤—É üêÑ –≤ –¥–æ–º üè†")
            return
        if low > high:
            low, high = high, low
        number = secrets.randbelow(high - low + 1) + low
        text = f"üé≤ –í—ã–ø–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{number}</b>\nüìä –î–∏–∞–ø–∞–∑–æ–Ω: {low} ‚Äî {high}"
        await message.answer(text)
    except ValueError:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /roll [min] [max]\n–ü—Ä–∏–º–µ—Ä: /roll 10 1000"
        )


@dp.message(Command("mute"))
async def mute(message: Message):
    if not message.reply_to_message:
        await message.answer(
            "‚ùå –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–º—É—Ç–∏—Ç—å."
        )
        return

    if (username := message.reply_to_message.from_user.username) in ADMINS:
        await message.answer(f"üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∏–º–µ–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –æ—Ç –º—É—Ç–∞.")
        return

    member = await message.chat.get_member(message.reply_to_message.from_user.id)
    if member.status in {"administrator", "creator"}:
        await message.answer("üõ° –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute <–º–∏–Ω—É—Ç—ã>\n–ü—Ä–∏–º–µ—Ä: /mute 1m –∏–ª–∏ /mute 5m"
        )
        return

    duration = args[0]
    match = re.match(r"^(\d+)m$", duration)
    if not match:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã: 1m ‚Ä¶ 14400m")
        return

    minutes = min(int(match.group(1)), 14400)
    if not 1 <= minutes <= 14400:
        await message.answer("‚ö†Ô∏è –î–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ ‚Äî –æ—Ç 1 –¥–æ 14400 –º–∏–Ω—É—Ç.")
        return

    target = message.reply_to_message.from_user
    until_date = message.date + timedelta(minutes=minutes)

    try:
        await message.bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date,
        )
        await message.answer(
            f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target.username or target.full_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω."
        )
    except Exception:
        logger.exception(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ mute: target=%s chat=%s", target.username, message.chat.id
        )
        await message.answer("‚ùå –û—à–∏–±–∫–∞")


@dp.message(Command("unmute"))
async def unmute(message: Message):
    if not message.reply_to_message:
        await message.answer(
            "‚ùå –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–º—É—Ç–∏—Ç—å."
        )
        return

    target = message.reply_to_message.from_user

    try:
        await message.bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_send_polls=True,
                can_invite_users=True,
                can_pin_messages=True,
                can_change_info=True,
            ),
        )
        await message.answer(
            f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target.username or target.full_name} —Ä–∞–∑–º—É—á–µ–Ω!"
        )
    except TelegramBadRequest as e:
        await message.answer(
            "üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚Äî –º—É—Ç –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª—Å—è."
        )
        logger.warning("TelegramBadRequest –ø—Ä–∏ unmute: %s", e)
    except Exception:
        logger.exception(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ unmute: target=%s chat=%s", target.username, message.chat.id
        )
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞.")


@dp.message(Command("anekdot"))
async def anekdot(message: Message):
    joke = await get_random_top_shortik()
    await message.answer(joke)


@dp.message(Command(settings.TG_COMMAND))
async def tg_command(message: Message):
    random_user = random.choice(settings.CHAT_USERS)  # noqa: S311
    await message.answer(f"{random_user} - {settings.RANK}")


@dp.message(Command(settings.TG_COMMAND1))
async def tg_command1(message: Message):
    random_user = settings.CHAT_USERS[
        hash(str(datetime.datetime.now().timetuple().tm_yday)) % len(settings.CHAT_USERS)
    ]
    await message.answer(f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π {settings.RANK} —ç—Ç–æ {random_user}")


@dp.message(~F.text.startswith("/"))
async def handle_any_message(message: Message, bot: Bot):
    chat = message.chat
    message_text = message.text or "[–º–µ–¥–∏–∞/—Ñ–∞–π–ª/–¥—Ä—É–≥–æ–µ]"

    logger.info(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = %s | Chat ID = %s | –¢–∏–ø = %s | –ù–∞–∑–≤–∞–Ω–∏–µ = %s | –¢–µ–∫—Å—Ç = %s",
        message.from_user.username,
        chat.id,
        chat.type,
        chat.title if chat.title else "–Ω–µ—Ç",
        message_text,
    )

    # –µ—Å–ª–∏ SOURCE_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if settings.SOURCE_CHAT_ID is None and dp["dynamic_source_chat_id"] is None:
        dp["dynamic_source_chat_id"] = chat.id
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω SOURCE_CHAT_ID = %s", dp["dynamic_source_chat_id"])

    target_source_id = (
        int(settings.SOURCE_CHAT_ID)
        if settings.SOURCE_CHAT_ID
        else dp["dynamic_source_chat_id"]
    )

    if target_source_id and chat.id == target_source_id:
        await bot.forward_message(
            chat_id=int(settings.DEST_CHAT_ID),
            from_chat_id=chat.id,
            message_id=message.message_id,
        )


async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

    bot = Bot(
        token=settings.TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
        stream=sys.stdout,
    )
    # –£–±—Ä–∞–ª –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –æ—Ç aiogram.event
    logging.getLogger("aiogram.event").setLevel(logging.WARNING)
    asyncio.run(main())
